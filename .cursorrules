# Vyges IP Development Rules

This project follows Vyges conventions for hardware IP development. Always refer to .vyges-ai-context.json for:

## Code Generation Rules
- Use Verilog-2001 for RTL and SystemVerilog for testbenches when required
- Follow snake_case naming for modules and files
- Include required module headers with description and author
- Place RTL in rtl/ directory
- Place testbenches in tb/ directory

## Project Structure
- Each repository = one functional IP
- Use vyges CLI commands for project management
- Follow metadata-driven generation from vyges-metadata.json

## Naming Conventions
- Repository: {orgname}/{repo-name} format
- IP name: lowercase with hyphens, 3-50 chars
- Modules: snake_case (e.g., pwm_controller)
- Files: snake_case.sv or snake_case.v (e.g., pwm_controller.sv or pwm_controller.v)
- Parameters: UPPER_SNAKE_CASE
- Signals: snake_case with direction prefix (i_, o_, io_)

## Required Patterns
- All modules must have i_clk and i_rst_n signals
- Include proper interface patterns (APB, AXI, etc.)
- Testbenches must include clock generation and reset sequence
- Documentation must include pinout tables from metadata

## CLI Integration
- Use vyges init --interactive for project setup
- Use vyges expand for adding complexity
- Use vyges validate for checking compliance
- Use vyges generate for code generation

Always check .vyges-ai-context.json for complete context and specific AI prompts. 
